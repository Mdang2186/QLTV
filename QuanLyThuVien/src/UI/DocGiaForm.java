package UI;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import java.sql.Connection;
import java.sql.DriverManager;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;
import ConnectionUtility.DatabaseConnection;

/**
 *
 * @author Admin
 */
public class DocGiaForm extends javax.swing.JFrame {
       
    /**
     * Creates new form DocGiaForm
     */
    public DocGiaForm() {
        initComponents(); loadData();loadEmployeeComboBox();
    }
    private void loadEmployeeComboBox() {
    try (Connection conn =DatabaseConnection.getConnection()) {
        if (conn == null) {
            JOptionPane.showMessageDialog(null, "Không thể kết nối tới cơ sở dữ liệu!");
            return;
        }

        // Lấy cả MaNhanVien và TenNhanVien từ bảng nhanvien
        String sql = "SELECT MaNhanVien, TenNhanVien FROM nhanvien";
        try (PreparedStatement pst = conn.prepareStatement(sql);
             ResultSet rs = pst.executeQuery()) {

            nvtt.removeAllItems(); // Xóa các mục cũ hiện có
            while (rs.next()) {
                String maNhanVien = rs.getString("MaNhanVien");
                String tenNhanVien = rs.getString("TenNhanVien");
                // Ghép MaNhanVien và TenNhanVien theo định dạng mong muốn
                nvtt.addItem(maNhanVien + " - " + tenNhanVien);
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Lỗi khi tải danh sách nhân viên: " + e.getMessage());
        e.printStackTrace();
    }
}


      private void loadData() {
    try {
        Connection conn =DatabaseConnection.getConnection();
        String sql = "SELECT * FROM docgia";
        PreparedStatement pst = conn.prepareStatement(sql);
        ResultSet rs = pst.executeQuery();

        DefaultTableModel model = (DefaultTableModel) tbDG.getModel();
        model.setRowCount(0); // Xóa các dòng cũ trong bảng

        while (rs.next()) {
            String maDocGia = rs.getString("MaDocGia");
            String tenDocGia = rs.getString("TenDocGia");
            String ngaySinh = rs.getString("NgaySinh");
            String gioiTinh = rs.getString("GioiTinh");
            String diaChi = rs.getString("DiaChi");
            String ngayTaoThe = rs.getString("NgayTaoThe"); // Lấy ngày tạo thẻ
            String maNhanVienTaoThe = rs.getString("MaNhanVienTaoThe");

            // Thêm dữ liệu vào bảng
            model.addRow(new Object[]{maDocGia, tenDocGia, ngaySinh, gioiTinh, diaChi, ngayTaoThe, maNhanVienTaoThe});
        }
        conn.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Lỗi khi tải dữ liệu: " + e.getMessage());
    }
}
/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tDG_DCM = new javax.swing.JTextField();
        btnThem = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnXoa = new javax.swing.JButton();
        btnLammoi = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbDG = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        mDG_DCM = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        dc_DCM = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cbgt_DCM = new javax.swing.JComboBox<>();
        ns_DCM = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        nvtt = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        ntt_DCM = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);

        btnThem.setText("THÊM");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnSua.setText("SỬA");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("THÔNG TIN ĐỘC GIẢ");

        btnXoa.setText("XÓA");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnLammoi.setText("LÀM MỚI");
        btnLammoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLammoiActionPerformed(evt);
            }
        });

        tbDG.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "MÃ ĐỘC GIẢ", "TÊN ĐỘC GIẢ", "NGÀY SINH", "GIỚI TÍNH", "ĐỊA CHỈ", "NGÀY TẠO THẺ", "MÃ NV TẠO THẺ"
            }
        ));
        tbDG.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbDGMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbDG);

        jLabel2.setText("Mã Độc giả:");

        jLabel3.setText("Tên Độc giả:");

        jLabel4.setText("Địa chỉ:");

        jLabel5.setText("Giới tính:");

        cbgt_DCM.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nam", "Nữ" }));

        jLabel6.setText("Ngày sinh:");

        jButton6.setText("Trang chủ");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel7.setText("Mã NV tạo thẻ:");

        nvtt.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel8.setText("Ngày tạo thẻ:");

        jLabel9.setText("Đỗ Công Minh");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27)
                                        .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(29, 29, 29)
                                        .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(31, 31, 31)
                                        .addComponent(btnLammoi))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tDG_DCM)
                                    .addComponent(mDG_DCM, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ns_DCM))
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dc_DCM, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cbgt_DCM, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(nvtt, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(ntt_DCM))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(244, 244, 244)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel9)))
                        .addGap(0, 44, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel9)
                .addGap(5, 5, 5)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(28, 28, 28)
                        .addComponent(jLabel3)
                        .addGap(28, 28, 28)
                        .addComponent(jLabel6)
                        .addGap(4, 4, 4))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mDG_DCM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(dc_DCM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tDG_DCM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(cbgt_DCM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ns_DCM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(nvtt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(ntt_DCM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThem)
                    .addComponent(btnSua)
                    .addComponent(btnXoa)
                    .addComponent(btnLammoi))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
this.dispose();
    
    // Tạo và hiển thị lại MainForm
    MainForm mainForm = new MainForm();
    mainForm.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
          try {
        // Lấy và kiểm tra dữ liệu đầu vào
        String maDocGia = mDG_DCM.getText().trim();
        String tenDocGia = tDG_DCM.getText().trim();
        String ngaySinh = ns_DCM.getText().trim();
        String gioiTinh = cbgt_DCM.getSelectedItem().toString();
        String diaChi = dc_DCM.getText().trim();
        String ngayTaoThe = ntt_DCM.getText().trim();  // Lấy từ textbox

        if (maDocGia.isEmpty() || tenDocGia.isEmpty() || ngayTaoThe.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ mã, tên độc giả và ngày tạo thẻ!");
            return;
        }

        // Lấy mã nhân viên từ combobox (chỉ phần trước dấu '-')
        String maNhanVien = nvtt.getSelectedItem().toString().split(" - ")[0];

        // Kiểm tra mã độc giả trùng
        String checkDocGiaSql = "SELECT COUNT(*) FROM docgia WHERE MaDocGia = ?";
        ResultSet rs = DatabaseConnection.executeQuery(checkDocGiaSql, maDocGia);
        if (rs.next() && rs.getInt(1) > 0) {
            JOptionPane.showMessageDialog(null, "Mã độc giả đã tồn tại!");
            return;
        }

        // Kiểm tra mã nhân viên tồn tại
        String checkNhanVienSql = "SELECT COUNT(*) FROM nhanvien WHERE MaNhanVien = ?";
        rs = DatabaseConnection.executeQuery(checkNhanVienSql, maNhanVien);
        if (rs.next() && rs.getInt(1) == 0) {
            JOptionPane.showMessageDialog(null, "Mã nhân viên không tồn tại!");
            return;
        }

        // Câu lệnh thêm độc giả có ngày tạo thẻ
        String insertSql = "INSERT INTO docgia (MaDocGia, TenDocGia, NgaySinh, GioiTinh, DiaChi, NgayTaoThe, MaNhanVienTaoThe) VALUES (?, ?, ?, ?, ?, ?, ?)";
        int rows = DatabaseConnection.executeUpdate(insertSql, maDocGia, tenDocGia, ngaySinh, gioiTinh, diaChi, ngayTaoThe, maNhanVien);

        if (rows > 0) {
            JOptionPane.showMessageDialog(null, "Thêm độc giả thành công!");
            loadData(); // Làm mới dữ liệu bảng
        } else {
            JOptionPane.showMessageDialog(null, "Thêm thất bại! Vui lòng thử lại.");
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Lỗi SQL khi thêm độc giả: " + e.getMessage());
        e.printStackTrace();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Lỗi không xác định: " + e.getMessage());
        e.printStackTrace();
    }

  // TODO add your handling code here:
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
    // Kiểm tra đầy đủ thông tin
     if (mDG_DCM.getText().isEmpty() || tDG_DCM.getText().isEmpty() || ns_DCM.getText().isEmpty() ||
        cbgt_DCM.getSelectedItem() == null || dc_DCM.getText().isEmpty() || nvtt.getSelectedItem() == null ||
        ntt_DCM.getText().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ thông tin!");
        return;
    }

    String maDocGia = mDG_DCM.getText().trim();
    String tenDocGia = tDG_DCM.getText().trim();
    String ngaySinh = ns_DCM.getText().trim();
    String gioiTinh = cbgt_DCM.getSelectedItem().toString();
    String diaChi = dc_DCM.getText().trim();
    String ngayTaoTheStr = ntt_DCM.getText().trim();

    // Tách mã nhân viên từ combobox (phần trước dấu '-')
    String maNhanVien = nvtt.getSelectedItem().toString().split(" - ")[0];

    // Kiểm tra định dạng ngày tạo thẻ
    java.sql.Date ngayTaoThe = null;
    try {
        ngayTaoThe = java.sql.Date.valueOf(ngayTaoTheStr);  // yyyy-MM-dd
    } catch (IllegalArgumentException e) {
        JOptionPane.showMessageDialog(null, "Định dạng ngày tạo thẻ không hợp lệ. Vui lòng nhập theo định dạng yyyy-MM-dd.");
        return;
    }

    String checkEmployeeSql = "SELECT COUNT(*) FROM nhanvien WHERE MaNhanVien = ?";
    String updateSql = "UPDATE docgia SET TenDocGia=?, NgaySinh=?, GioiTinh=?, DiaChi=?, MaNhanVienTaoThe=?, NgayTaoThe=? WHERE MaDocGia=?";

    try (Connection conn = DatabaseConnection.getConnection();
         PreparedStatement pstCheckEmployee = conn.prepareStatement(checkEmployeeSql)) {

        pstCheckEmployee.setString(1, maNhanVien);
        try (ResultSet rsEmp = pstCheckEmployee.executeQuery()) {
            if (rsEmp.next() && rsEmp.getInt(1) == 0) {
                JOptionPane.showMessageDialog(null, "Mã nhân viên không tồn tại!");
                return;
            }
        }

        try (PreparedStatement pstUpdate = conn.prepareStatement(updateSql)) {
            pstUpdate.setString(1, tenDocGia);
            pstUpdate.setString(2, ngaySinh);
            pstUpdate.setString(3, gioiTinh);
            pstUpdate.setString(4, diaChi);
            pstUpdate.setString(5, maNhanVien); // Chỉ mã thôi!
            pstUpdate.setDate(6, ngayTaoThe);
            pstUpdate.setString(7, maDocGia);

            int rows = pstUpdate.executeUpdate();
            if (rows > 0) {
                JOptionPane.showMessageDialog(null, "Cập nhật thành công!");
                loadData();
            } else {
                JOptionPane.showMessageDialog(null, "Không tìm thấy độc giả với mã: " + maDocGia);
            }
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Lỗi SQL khi cập nhật: " + e.getMessage());
        e.printStackTrace();
    }

   // TODO add your handling code here:
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnLammoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLammoiActionPerformed
  mDG_DCM.setText("");
    tDG_DCM.setText("");
    ns_DCM.setText("");
    dc_DCM.setText("");
    cbgt_DCM.setSelectedIndex(-1); // Hủy chọn giới tính
    nvtt.setSelectedIndex(-1); // Hủy chọn nhân viên
    tbDG.clearSelection(); // X      // TODO add your handling code here:
    }//GEN-LAST:event_btnLammoiActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
 // Kiểm tra xem người dùng đã nhập mã độc giả hay chưa
    String maDocGia = mDG_DCM.getText().trim();

    if (maDocGia.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Vui lòng nhập mã độc giả để xóa!");
        return;
    }

    try (Connection conn = DatabaseConnection.getConnection()) {
        if (conn == null) {
            JOptionPane.showMessageDialog(null, "Không thể kết nối đến cơ sở dữ liệu!");
            return;
        }

        // Kiểm tra xem độc giả có tồn tại
        String checkSql = "SELECT COUNT(*) FROM docgia WHERE MaDocGia = ?";
        try (PreparedStatement checkStmt = conn.prepareStatement(checkSql)) {
            checkStmt.setString(1, maDocGia);
            try (ResultSet rs = checkStmt.executeQuery()) {
                if (rs.next() && rs.getInt(1) == 0) {
                    JOptionPane.showMessageDialog(null, "Không tìm thấy độc giả với mã: " + maDocGia);
                    return;
                }
            }
        }

        // Xác nhận trước khi xóa
        int confirm = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn xóa độc giả này không?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) return;

        // Tiến hành xóa
        String deleteSql = "DELETE FROM docgia WHERE MaDocGia = ?";
        try (PreparedStatement pst = conn.prepareStatement(deleteSql)) {
            pst.setString(1, maDocGia);

            int rows = pst.executeUpdate();
            if (rows > 0) {
                JOptionPane.showMessageDialog(null, "Xóa thành công!");
                loadData();  // Làm mới bảng
            } else {
                JOptionPane.showMessageDialog(null, "Không tìm thấy độc giả với mã: " + maDocGia);
            }
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Lỗi khi xóa: " + e.getMessage());
        e.printStackTrace();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Lỗi không xác định: " + e.getMessage());
        e.printStackTrace();
    }
  // TODO add your handling code here:
    }//GEN-LAST:event_btnXoaActionPerformed

    private void tbDGMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbDGMouseClicked
      int selectedRow = tbDG.getSelectedRow(); // Get the selected row index
    
    if (selectedRow != -1) { // Ensure a row is selected
        mDG_DCM.setText(tbDG.getValueAt(selectedRow, 0).toString()); // Column 0: MaDG
        tDG_DCM.setText(tbDG.getValueAt(selectedRow, 1).toString()); // Column 1: TenDG
        ns_DCM.setText(tbDG.getValueAt(selectedRow, 2).toString()); // Column 2: NgaySinh
        dc_DCM.setText(tbDG.getValueAt(selectedRow, 3).toString()); // Column 3: DiaChi
        cbgt_DCM.setSelectedItem(tbDG.getValueAt(selectedRow, 4).toString()); // Column 4: GioiTinh
        nvtt.setSelectedItem(tbDG.getValueAt(selectedRow, 5).toString()); // Column 5: NhanVien
    }

  // TODO add your handling code here:
    }//GEN-LAST:event_tbDGMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DocGiaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DocGiaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DocGiaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DocGiaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DocGiaForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLammoi;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JComboBox<String> cbgt_DCM;
    private javax.swing.JTextField dc_DCM;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField mDG_DCM;
    private javax.swing.JTextField ns_DCM;
    private javax.swing.JTextField ntt_DCM;
    private javax.swing.JComboBox<String> nvtt;
    private javax.swing.JTextField tDG_DCM;
    private javax.swing.JTable tbDG;
    // End of variables declaration//GEN-END:variables
}
